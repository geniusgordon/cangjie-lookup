#!/usr/bin/env node

var chalk = require('chalk');
var commander = require('commander');
var decompose = require('../lib/decompose').default;
var history = require('../lib/history');

var program = commander
  .version(require('../package.json').version)
  .arguments('<words>')
  .option('-H, --history', 'Show history')
  .parse(process.argv);

if (program.history) {
  history.loadHistory().then(decomposeAndOutput);
} else if (program.args.length === 0) {
  program.help();
}

decomposeAndOutput(program.args.join('').split(''));

function decomposeAndOutput(words) {
  const string = words.join('');
  return decompose(string)
    .then(result => {
      words.forEach(word => {
        const output = result[word]
          .map(r => `${r.code} ` + chalk.dim(`(${r.key})`))
          .join('\n    ');
        console.log(`${word}: ${output}`);
      });
    })
    .then(() => history.saveHistory(string))
    .catch(console.error);
}

